{"version":3,"sources":["cmps/setting-changer.js","cmps/pomodoro.js","serviceWorker.js","index.js"],"names":["SettingChanger","props","react_default","a","createElement","class","id","sname","style","labelColor","charAt","toUpperCase","slice","visible","type","onClick","changer","className","setting","INITIAL_STATE","status","time_type","time_left","break_length","session_length","Pomodoro","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timer","clip","getClockTime","bind","assertThisInitialized","changeBreak","changeSession","startStop","tickTime","reset","audio","React","createRef","seconds","Math","floor","toString","padStart","value","new_break","setState","new_session","current","load","promise","play","undefined","then","_","catch","error","setInterval","clearInterval","action","pause","currentTime","symbol","canChange","visibility","statusColor","clockRimStyle","color","borderColor","headColor","breakLabelColor","sessLabelColor","ref","src","setting_changer","Component","Boolean","window","location","hostname","match","ReactDOM","render","pomodoro","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7681229.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SettingChanger = props => {\r\n    return (\r\n       <div class=\"setting-cont\">\r\n         <div id={props.sname + \"-label\"} style={props.labelColor}>{props.sname.charAt(0).toUpperCase() + props.sname.slice(1)} Length </div>\r\n         <div class=\"setting-inner\">\r\n           <button id={props.sname + \"-decrement\"} style={props.visible} type=\"button\" onClick={()=>props.changer(-1)} ><i className=\"fas fa-minus\"></i></button>\r\n           <label id={props.sname + \"-length\"} style={props.labelColor}> {props.setting}</label>\r\n           <button id={props.sname + \"-increment\"} style={props.visible} type=\"button\" onClick={()=>props.changer(1)} ><i className=\"fas fa-plus\"></i></button>\r\n         </div>\r\n       </div>\r\n    );\r\n  };\r\n\r\nexport default SettingChanger;","import React from 'react';\nimport SettingChanger from './setting-changer';\n\nconst SESSION = \"SESSION\";\nconst BREAK = \"BREAK\";\nconst INITIAL_STATE = {status: \"\", time_type: SESSION, time_left: 25 * 60, break_length: 5, session_length: 25};\nconst BEEP = \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/3/success.mp3\";\n\nclass Pomodoro extends React.Component{\n constructor(props){\n   super(props);\n   this.state = INITIAL_STATE;\n   this.timer = \"\";\n   this.clip = \"\";\n   this.getClockTime = this.getClockTime.bind(this);\n   this.changeBreak = this.changeBreak.bind(this);\n   this.changeSession = this.changeSession.bind(this);\n   this.startStop= this.startStop.bind(this);\n   this.tickTime = this.tickTime.bind(this);\n   this.reset = this.reset.bind(this);\n   this.audio = React.createRef();\n } \n  \n  //Convert an amount of seconds into the minutes/seconds format to display on a clock\n  getClockTime(seconds){\n      let min = (Math.floor(seconds/60)).toString().padStart(2,\"0\");\n    let sec = (seconds%60).toString().padStart(2,\"0\");\n    return min + \":\" + sec; \n  }\n  \n  //Change the value of the break length by the value provided\n  changeBreak(value){\n     let new_break = this.state.break_length + value;\n    if(new_break > 0 && new_break <= 60){\n      this.setState({status: \"\", time_type: this.state.time_type, time_left: this.state.time_left, break_length: new_break, session_length: this.state.session_length});\n    }\n  }\n  \n  //Change the value of the session length by the value provided\n  changeSession(value){\n    let new_session = this.state.session_length + value;\n    if(new_session > 0 && new_session <= 60){\n      this.setState({status: \"\", time_type: this.state.time_type, time_left: new_session * 60, break_length: this.state.break_length, session_length: new_session});\n    }\n  }\n    \n  //Start the timer if it ic currently stopped or stop it of it is currently ticking\n  startStop(){\n    //Code between comments is for ensuring asynchronous tests pass\n    this.audio.current.load();\n  // this.audio.current.volume = 0.00; \n     let promise = this.audio.current.play();\n    if (promise !== undefined) {\n      promise.then(_ => {\n      }).catch(error => {\n      })\n    }\n    //this.audio.current.volume = 1.0;\n    //\n    \n    if(this.timer == \"\"){\n       this.setState({status: \"playing\", time_type: this.state.time_type, time_left: this.state.time_left, break_length: this.state.break_length, session_length: this.state.session_length});\n      this.timer = setInterval(this.tickTime,1000);\n    }\n    else{\n         this.setState({status: \"paused\", time_type: this.state.time_type, time_left: this.state.time_left, break_length: this.state.break_length, session_length: this.state.session_length});\n      clearInterval(this.timer);\n      this.timer = \"\";\n    }\n  }\n  \n  //A tick of the clock; remove one second of the current time displayed\n  tickTime(){\n if(this.state.time_left == 0){\n   /*this.audio.current.volume = 1.0;\n    */let promise = this.audio.current.play();\n    if (promise !== undefined) {\n      promise.then(_ => {\n      }).catch(error => {\n      })\n    }\n      if(this.state.time_type == SESSION){\n        this.setState({status: this.state.action,time_type: BREAK, time_left: this.state.break_length * 60, break_length: this.state.break_length, session_length: this.state.session_length});\n      }\n      else{\n         this.setState({status: this.state.action,time_type: SESSION, time_left: this.state.session_length * 60, break_length: this.state.break_length, session_length: this.state.session_length});\n      }\n    }\n    else{\n      this.setState({status: this.state.action,time_type: this.state.time_type, time_left: this.state.time_left - 1, break_length: this.state.break_length, session_length: this.state.session_length});\n    }\n  }\n  \n  //Reset the time left, break length and session length parameters to their initial states\n  reset(){\n    this.audio.current.pause();\n    this.audio.current.currentTime = 0;\n    if(this.timer != \"\"){\n      clearInterval(this.timer); \n      this.timer = \"\";\n    }\n    this.setState(INITIAL_STATE);\n  }\n  \n  render(){\n    let symbol = \"fas fa-play\"; //If the play or stop icon is to be displayed\n    let symbColor = {color: \"#66ff66\"};\n    let canChange = {visibility: \"visible\"}; // If the plus/minus icons for the break/session length are visible\n    let statusColor = \"white\";\n    if(this.state.status != \"\"){\n      canChange.visibility = \"hidden\";\n    }\n    if(this.state.status == \"playing\"){\n      statusColor = \"#66ff66\";\n      symbol = \"fas fa-pause\";\n      symbColor.color = \"red\";\n    }\n    if (this.state.status == \"paused\"){\n      statusColor = \"red\";\n    }\n    let clockRimStyle = {color: \"white\", borderColor: statusColor};\n    let headColor = {color: statusColor};\n    \n    let breakLabelColor = {color: \"white\"};\n    let sessLabelColor = {color: \"white\"};\n    if(this.state.status != \"\" && this.state.time_type == SESSION){\n      sessLabelColor.color = statusColor;\n    }\n    else if (this.state.status != \"\" && this.state.time_type == BREAK){\n      breakLabelColor.color = statusColor;\n    }\n return(\n <div id=\"clock-outer\">\n   <h1>Pomodoro Clock</h1>\n   <audio ref={this.audio} id=\"beep\" src={BEEP}/>\n   <div id=\"center\">\n    {/* <div id=\"break-cont\">\n       <div id=\"break-label\" style={breakLabelColor}>Break Length </div>\n       <div id=\"break-inner\">\n         <button id=\"break-decrement\" style={canChange} type=\"button\" onClick={()=>this.changeBreak(-1)} ><i id=\"break-dec-image\" className=\"fas fa-minus\"></i></button>\n         <label id=\"break-length\" style={breakLabelColor}> {this.state.break_length}</label>\n         <button id=\"break-increment\" style={canChange} type=\"button\" onClick={()=>this.changeBreak(1)} ><i id=\"break-inc-image\" className=\"fas fa-plus\"></i></button>\n       </div>\n     </div>*/}\n     <SettingChanger sname=\"break\" setting={this.state.break_length} changer={this.changeBreak} visible={canChange} labelColor={breakLabelColor}/>\n     <div id=\"timer-cont\">\n       <div id=\"time-center\" style={clockRimStyle}><h2 id=\"timer-label\" style={headColor}>{this.state.time_type}</h2><span id=\"time-left\">{this.getClockTime(this.state.time_left)}</span></div>\n     </div>\n     {/*<div id=\"session-cont\">\n       <div id=\"session-label\" style={sessLabelColor}>Session Length </div>\n       <div id=\"session-inner\">\n         <button id=\"session-decrement\" style={canChange} type=\"button\" onClick={()=>this.changeSession(-1)}><i className=\"fas fa-minus\"></i></button>\n         <label id=\"session-length\" style={sessLabelColor}>{this.state.session_length} </label>\n         <button id=\"session-increment\" style={canChange} type=\"button\" onClick={()=>this.changeSession(1)} ><i className=\"fas fa-plus\"></i></button>\n       </div>\n     </div>*/}\n     <SettingChanger sname=\"session\" setting={this.state.session_length} changer={this.changeSession} visible={canChange} labelColor={sessLabelColor}/>\n   </div>\n   <div id=\"clock-functions-cont\">\n     <button id=\"start_stop\"  type=\"button\" onClick={this.startStop}><i className={symbol}></i></button>\n     <button id=\"reset\" type=\"button\" onClick={this.reset}><i className=\"fas fa-redo\"></i></button>\n   </div>\n</div>);\n  }\n}\n\nexport default Pomodoro;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport Pomodoro from './cmps/pomodoro';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pomodoro />, document.getElementById('main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}